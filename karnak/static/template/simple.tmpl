<html lang="en" xmlns:t="http://twistedmatrix.com/ns/twisted.web.template/0.1">
<!DOCTYPE html>

<html>
   <head>
    <title>Karnak 1.0</title>
    <link rel="stylesheet" href="css/style.css" />  
    <link rel="stylesheet" type="text/css" href="highslide/highslide.css" />
    <script type="text/javascript" src="highslide/highslide-full.js"></script>
    <script type="text/javascript" src="js/socketed.js"></script>
    <script type="text/javascript">
	  hs.graphicsDir = 'highslide/graphics/';
    hs.outlineType = 'rounded-white';
    hs.showCredits = false;
    hs.align = 'center';
//    hs.wrapperClassName = 'draggable-header';
//    hs.width = 1024;
//   hs.height = 768;
     </script>
    
    <script src="js/jquery.js"></script>
    <script src="js/jquery.masonry.min.js"></script>
    <script src="js/jquery.infinitescroll.js"></script>

    <script type="text/javascript">
      var socket_id = 123;
    </script>    

    <script type="text/javascript">
         var sock = null;
         var ellog = null;

         window.onload = function() {

            var wsuri;
            ellog = document.getElementById('log');
       
            // open a websocket back to the host
      
            // the sid is a test of generating unique tokens to verify and map the connection
            // TODO(arshan): it should be generated by the client resource automagically ultimately
            if (window.location.protocol === "file:") {
               wsuri = "ws://localhost:9000?sid=" + socket_id ;
            } else {
               wsuri = "ws://" + window.location.hostname + ":9000?sid=" + socket_id;
            }

            if ("WebSocket" in window) {
               sock = new WebSocket(wsuri);
            } else if ("MozWebSocket" in window) {
               sock = new MozWebSocket(wsuri);
            } else {
               log("Browser does not support WebSocket!");
            }

      // setup masonry on tiles div
      $('#tiles').masonry({
        itemSelector: '.box',
        columnWidth: 100
      });

      // handle the socket callbacks
            if (sock) {
               sock.onopen = function() {
                  log("Connected to " + wsuri);
                  // sock.send("uniquesessionid");
               }

               sock.onclose = function(e) {
                  log("Connection closed (wasClean = " + e.wasClean + ", code = " + e.code + ", reason = '" + e.reason + "')");
                  sock = null;
               }

               sock.onmessage = function(e) {
                 // socket content is json encoded dict 
		 content = JSON.parse(e.data);

                 // special case for html log messages from the server
		 log(content["msg:html"]);

                 for (var key in content) {
		  request = key.split(':');
		  switch (request[1]){
                        case "newmason": // add a new tile, assumes the masonry stuff is in place
                          log("got a new mason tile"); 
                          placetile(key, content);
                          break;
			case "replaceWith": // DANGEROUS!
			  $("#"+request[0]).replaceWith(content[key]);
			  break;
			case "html":
			  $("#"+request[0]).html(content[key]);
			  break;
			default:
			  $("#"+request[0]).attr(request[1],content[key]);
		  }
		 }
               }
            }
		
	    $('#log_toggle').click(
                 function(){
			if ($('#log_toggle').html() == 'hide logs'){
			$('#log').hide(100, function(){
			 $('#log_toggle').html('show logs')
			}); }
			else {
                         $('#log').show(100, function(){
                         $('#log_toggle').html('hide logs') });
			}
		}
		);
         };

         function broadcast() {
            var msg = document.getElementById('message').value;
            if (sock) {
               sock.send(msg);
               log("Sent: " + msg);
            } else {
               log("Not connected.");
            }
         };

         function placetile(key, content){
            // we want to add new keys for each tile ... 
            
            
            this.$OuterDiv = $(content[key]);            
            $OuterDiv.css({opacity:0, top:0});
//            $OuterDiv.html(content[key]);
            $OuterDiv.click(hs.htmlExpand($OuterDiv, { headingText: 'Yo Dawg' }));
            $('#tiles').append($OuterDiv);            
//            $('#tiles').prepend($OuterDiv);            
            $OuterDiv.animate({ opacity: 1 });

            $("#tiles").masonry('appended', $OuterDiv, true, function() {               
              // this probably only works on chrome, but what-ev.
              log($('document').height());
              if ($('html').scrollTop() < $(document).height()) {
                // scroll to bottom
                $('html, body').animate({scrollTop: $(document).height()}, 'slow');
              }
            });
            
           
           

         }

         function log(m) {
            ellog.innerHTML += m + '\n';
            ellog.scrollTop = ellog.scrollHeight;
         };
      </script>
   </head>


<body class="demos" OnLoad="document.kidform.kid.focus();">
  <div id="site-nav" style="float:left;"> 
	<img src="images/logo.jpg"></img>
	<br>
	%(toc)s
  </div> 
    <div class="help" style="position:absolute; bottom:0;">
	%(help)s
    </div>
    <div id="content" style="position:absolute;left:14em;top:4.1em; width:90%%">
      <h2>Swivel Scan</h2>
	<h4>%(content)s</h4>
      <div id="tiles" class="transitions-enabled clearfix" style="width:100%%;" >
        <!-- starts empty, but onload calls an initial retrieve -->
      </div> <!-- #container -->
      
      <nav id="page-nav">
      </nav>
      
      <footer id="site-footer">
	%(footer)s
      </footer>
    <button id="log_toggle">show logs</button>
    <pre id="log" style="display: none; width: 66em; height: 33em; overflow-y: scroll; background-color: #aaa;"></pre>
    </div> <!-- #content -->
  </body>
</html>
