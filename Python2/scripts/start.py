"""Start the karnak software after a make sanity.

This script install the depth camera dependencies, starts the camera_server
generated by make sanity and starts the websocket script based
the host yaml configuration.

Typical usage is:
  python start.py

"""

import logging
import os
import socket
import subprocess

import kflags
import utils

# Hostname of scan station
HOSTNAME = socket.gethostname()
# Home directory
HOME = "/scan/katamari/"
# Base name of software install
SOFTWARE_ROOT = os.path.join(HOME, "scanning-ops")
# Path of new karnak software
KARNAK_ROOT = os.path.join(SOFTWARE_ROOT, "karnak")
# Path of util
UTIL_ROOT = os.path.join(KARNAK_ROOT, "util")
# Path of Depth camera
DEPTH_ROOT = os.path.join(KARNAK_ROOT, "depth_camera")
# Path of UI
UI_ROOT = os.path.join(KARNAK_ROOT, "ui")
# Path of Config
CONFIG_ROOT = os.path.join(KARNAK_ROOT, "config")
# Path of Python
os.environ["PYTHONPATH"] = KARNAK_ROOT

FLAGS = kflags.FLAGS
kflags.AddArgument("--verbose", action="store_true",
                   help="Enable output from camera_server")


class Error(Exception):
  """Base error class."""
  pass


def DepthCameraSetup(cwd):
  """Install all the necessary software for the depth camera.

  Args:
    cwd: directory for setup.sh
  """

  cmd = ["bash", "setup.sh"]
  logging.info("running depth camera setup.sh")
  try:
    utils.CheckSubprocessCall(cmd, cwd=cwd)
  except subprocess.CalledProcessError as depth_error:
    logging.error(depth_error)
    raise Error("setup.sh failed in %s directory" % DEPTH_ROOT)


def StartCameraServer(cwd, verbose):
  """Starts the camera server script generated by make sanity with output.

  Args:
    cwd: directory for start_camera_server.sh
    verbose: output flag

  Raises:
    Error if camera_server fails to start.
  """

  cmd = ["bash", "start_camera_server.sh"]
  logging.info("Starting camera_server")
  try:
    if verbose:
      subprocess.Popen(cmd, cwd=cwd)
    else:
      subprocess.Popen(cmd, cwd=cwd, stderr=subprocess.PIPE)
  except subprocess.CalledProcessError as camera_server_error:
    logging.error(camera_server_error)
    raise Error("camera_server failed to start in %s" % UTIL_ROOT)


def StartWebsocket(cwd):
  """Starts the websocket script with the configuration from the yaml file.

  Args:
    cwd: directory to start websocket

  Raises:
    Error if websocket fails to start.
  """

  yaml_path = os.path.join(CONFIG_ROOT, "%s.yaml" % HOSTNAME)
  websocket = os.path.join(UI_ROOT, "websocket.py")
  cmd = ["python", websocket, yaml_path]
  logging.info("Starting websocket based on yaml configuration")
  try:
    subprocess.Popen(cmd, cwd=cwd, stderr=subprocess.PIPE)
  except subprocess.CalledProcessError as websocket_error:
    logging.error(websocket_error)
    raise Error("websocket failed to start in %s" % UI_ROOT)


def main():
  FLAGS.Parse()
  utils.InitializeLogging()
  DepthCameraSetup(DEPTH_ROOT)
  StartCameraServer(UTIL_ROOT, FLAGS.verbose)
  StartWebsocket(KARNAK_ROOT)

if __name__ == "__main__":
  main()
