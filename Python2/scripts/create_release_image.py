#!/usr/bin/python
"""Creates a scanning-ops release image.

NOTE: This script needs to be run from within the
scanning-ops/scripts directory.  It serves 3 tasks:

1) Runs `make clean` in the SCRIPTS and KARNAK directory.
3) Creates a release tarball file (excluding .git and .pyc files).
4) Runs `make update_scanops` in the SCRIPTS directory.

"""

__author__ = ("nguyenmic@google.com (Michael Nguyen):")

import datetime
import logging
import os
import re
import subprocess
import sys
import tarfile

import kflags
import utils

# Scripts directory location
SCRIPTS_PATH = "scanning-ops/scripts"

FLAGS = kflags.FLAGS
kflags.AddArgument("--revision", type=int, default=0,
                   help="Revision number for the release image.")


class Error(Exception):
  """Base error class."""
  pass


class MakeError(Error):
  """Make error."""
  pass


def MakeClean(cwd):
  """Runs 'make clean' in scripts and karnak directory.

  Args:
    cwd: The working directory

  Raises:
    MakeError if make clean fails

  """
  cmd = ["make", "clean"]

  logging.info("Running make clean in the scripts dir")
  try:
    utils.CheckSubprocessCall(cmd, cwd)
  except subprocess.CalledProcessError as make_error:
    logging.error(make_error)
    raise MakeError("make clean failed in %s directory" % cwd)

  # Move to the karnak dir in scanning-ops
  cwd = os.path.join(cwd, "../karnak")

  logging.info("Running make clean in the karnak dir")
  try:
    utils.CheckSubprocessCall(cmd, cwd)
  except subprocess.CalledProcessError as make_error:
    logging.error(make_error)
    raise MakeError("make clean failed in %s directory" % cwd)


def MakeUpdateScanOps(cwd):
  """Creates a update_scanops exe file and moves it one dir above scannings-ops.

  Args:
    cwd: The working directory

  Raises:
    MakeError if make update_scanops fails

  """
  cmd = ["make", "update_scanops"]

  logging.info("Running make update_scanops in the scripts directory")
  try:
    utils.CheckSubprocessCall(cmd, cwd)
  except subprocess.CalledProcessError as make_error:
    logging.error(make_error)
    raise MakeError("make update_scanops failed in %s directory", cwd)

  # Move update_scanops binary to one dir above the scanning-ops repo
  os.rename("update_scanops", "../../update_scanops")


def FilterFunction(tarinfo):
  """Filters out .git and .pyc dir(s) and file(s) during tarball creation.

  Args:
    tarinfo: TarInfo object generated by tarfile.add()

  Returns:
    None, if match is found
    tarinfo, if file or dir does not have a .git or .pyc suffix
  """
  filter_list = re.compile(r"(\.git|\.pyc)")

  if filter_list.search(tarinfo.name):
    return None
  return tarinfo


def CreateTarball(tarball_directory, revision):
  """Create the release tarball.

  Args:
    tarball_directory: location of the new tarball
    revision: Revision number for release tarball
  """
  today = datetime.datetime.now().strftime("%Y%m%d")
  tarball_name = "scanops-%s.%s.tgz" % (today, revision)
  tarball_path = os.path.join(tarball_directory, tarball_name)

  logging.info("Creating release tarball")
  with tarfile.open(tarball_path, "w:gz") as release_tarball:
    scanning_ops_dir = os.path.join(tarball_directory, "scanning-ops")
    release_tarball.add(scanning_ops_dir, arcname="scanning-ops",
                        filter=FilterFunction)


def main():
  """Create the release tarball image."""
  FLAGS.Parse()
  utils.InitializeLogging()

  root_path = os.getcwd()
  if not re.search(SCRIPTS_PATH + "$", root_path):
    logging.error("You must run this in the %s directory", SCRIPTS_PATH)
    sys.exit(os.EX_CONFIG)

  MakeClean(root_path)

  tarball_directory = os.path.dirname(os.path.dirname(root_path))
  CreateTarball(tarball_directory, FLAGS.revision)

  MakeUpdateScanOps(root_path)

if __name__ == "__main__":
  main()
