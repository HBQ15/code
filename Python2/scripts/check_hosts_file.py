"""Checks /etc/hosts against dictionary generated by stations class."""
__author__ = ("nguyenmic@google.com (Michael Nguyen)")

import logging
import os
import subprocess
import sys

import kflags
import stations
import utils

LOCATION = "SBS"

FLAGS = kflags.FLAGS
kflags.SetDefaults("stations", type=["all"])


def GetStationsHostsList(username, station_ip, root_ip):
  """Retrieve a list of hosts in the scanstation hosts file.

  Args:
    username: username to access station
    station_ip: IP address of scanstation
    root_ip: root IP to identify scanstations in hosts file

  Returns:
    Hosts list
  """
  hosts = []

  user_at_station = "%s@%s" % (username, station_ip)
  cmd = ["ssh", user_at_station, "cat", "/etc/hosts",
         "|", "grep", "^" + root_ip]
  try:
    hosts_entries = utils.CheckSubprocessCall(cmd)
  except subprocess.CalledExceptionError as ssh_error:
    logging.error("Station %s unreachable", station_ip)
    logging.error(ssh_error)
    return []

  for entry in hosts_entries.split("\n"):
    # Check for comments and strip them out if it exists
    if "#" in entry:
      entry = entry.split("#")[0]
    entry = entry.strip()
    if not entry:
      continue
    hosts.append(tuple(entry.split()))

  return hosts


def main():
  """Iterate over SBS IP array to compare hosts file."""
  FLAGS.Parse()
  utils.InitializeLogging()
  exit_code = os.EX_OK

  scan_stations = stations.Stations()
  stations_dict = scan_stations.GetStationIPs()

  golden_list = [tuple([ip, hostname])
                 for hostname, ip in stations_dict.items()]

  for station_ip in stations_dict.values():
    stations_list = GetStationsHostsList(
        FLAGS.username, station_ip,
        scan_stations.GetLocationRootIP(LOCATION))

    # If the stations_list is empty, move on to the next station
    if not stations_list:
      exit_code = os.EX_TEMPFAIL
      continue

    unknown_hosts = set(stations_list) - set(golden_list)
    if unknown_hosts:
      logging.error("Station %s has an invalid host file", station_ip)
      for host in unknown_hosts:
        logging.warning("%s is not a valid entry", host)

  sys.exit(exit_code)

if __name__ == "__main__":
  main()
